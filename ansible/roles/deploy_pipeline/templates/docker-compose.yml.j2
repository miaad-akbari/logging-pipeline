# templates/docker-compose.yml.j2
version: '{{ docker_compose_version }}'

networks:
  {{ docker_network }}:
    driver: bridge
    ipam:
      config:
        - subnet: "{{ network_subnet }}"
          gateway: "{{ network_gateway }}"

volumes:
  mysql-logs:
  kafka-data:
  postgres-data:

services:
  zookeeper:
    image: "{{ zookeeper_image }}"
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      {{ docker_network }}:
        ipv4_address: "{{ zookeeper_ip }}"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 10s
      retries: 10

  kafka:
    image: "{{ kafka_image }}"
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "{{ zookeeper_host }}:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://{{ kafka_ip }}:29092,PLAINTEXT_HOST://{{ kafka_host_internal }}:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      {{ docker_network }}:
        ipv4_address: "{{ kafka_ip }}"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "29092"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: unless-stopped

  kafdrop:
    image: "{{ kafdrop_image }}"
    container_name: kafdrop
    ports:
      - "9000:9000"
    depends_on:
      - kafka
    environment:
      KAFKA_BROKERCONNECT: "{{ kafka_host_internal }}:9092"
    networks:
      {{ docker_network }}:
        ipv4_address: "{{ kafdrop_ip }}"

  mysql:
    image: "{{ mysql_image }}"
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: "{{ mysql_root_password }}"
      MYSQL_DATABASE: "{{ mysql_database }}"
    command: --general-log=1 --general-log-file=/var/log/mysql/mysql-query.log
    volumes:
      - mysql-logs:/var/log/mysql
    networks:
      {{ docker_network }}:
        ipv4_address: "{{ mysql_ip }}"
    user: 1000:1000
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p{{ mysql_root_password }}"]
      interval: 10s
      timeout: 5s
      retries: 10

  postgres:
    image: "{{ postgres_image }}"
    container_name: postgres
    environment:
      POSTGRES_USER: "{{ postgres_user }}"
      POSTGRES_PASSWORD: "{{ postgres_password }}"
      POSTGRES_DB: "{{ postgres_db }}"
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      {{ docker_network }}:
        ipv4_address: "{{ postgres_ip }}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U {{ postgres_user }} -d {{ postgres_db }}"]
      interval: 10s
      timeout: 5s
      retries: 10

  rsyslog:
    build:
      context: "{{ app_dir }}/config/rsyslog"
    container_name: rsyslog
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - mysql-logs:/var/log/mysql:ro
    networks:
      {{ docker_network }}:
        ipv4_address: "{{ rsyslog_ip }}"
    restart: unless-stopped

  consumer:
    build:
      context: "{{ app_dir }}/consumer"
    container_name: consumer
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      {{ docker_network }}:
        ipv4_address: "{{ consumer_ip }}"
    environment:
      KAFKA_TOPIC: "{{ kafka_topic }}"
      KAFKA_BROKER: "{{ kafka_host_internal }}:9092"
      POSTGRES_DB: "{{ postgres_db }}"
      POSTGRES_USER: "{{ postgres_user }}"
      POSTGRES_PASSWORD: "{{ postgres_password }}"
      POSTGRES_HOST: "{{ postgres_host }}"
    restart: unless-stopped
