name: CD Pipeline

on:
  push:
    tags: ['v*']

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: consumer-image
        path: .

    - name: Load Docker image
      run: docker load -i consumer-image.tar

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Deploy to staging
      run: |

        scp -r docker-compose.yml docker-compose.prod.yml config/ ${{ secrets.SERVER_USER }}@${{ secrets.STAGING_SERVER }}:${{ secrets.SERVER_PORT }}:/opt/logging-pipeline/
        
        docker save consumer:latest | ssh ${{ secrets.SERVER_USER }}@${{ secrets.STAGING_SERVER }}:${{ secrets.SERVER_PORT }} "docker load"
        
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.STAGING_SERVER }}:${{ secrets.SERVER_PORT }} << 'EOF'
          cd /opt/logging-pipeline
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml down
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
          sleep 30
          docker-compose logs
        EOF

    - name: Run smoke tests
      run: |
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.STAGING_SERVER }}:${{ secrets.SERVER_PORT }} << 'EOF'
          cd /opt/logging-pipeline
          # Test MySQL
          docker exec mysql mysql -uroot -prootpassword -e "SHOW DATABASES;"
          
          # Test Kafka
          docker exec kafka kafka-topics --list --bootstrap-server localhost:9092
          
          # Test PostgreSQL
          docker exec postgres psql -U user -d mysqllogs -c "SELECT version();"
          
          # Test consumer
          docker exec consumer python -c "
          import psycopg2
          conn = psycopg2.connect(dbname='mysqllogs', user='user', password='password', host='postgres')
          print('PostgreSQL connection successful')
          "
        EOF

