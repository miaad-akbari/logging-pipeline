name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main]

jobs:

  # CI job
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Start services with Docker Compose
        run: docker compose -f docker-compose.yml up -d --build
      
      - name: Wait for services to start
        run: sleep 45
      
      - name: Make health check script executable
        run: chmod +x run-health-checks.sh
      
      - name: Run health checks
        run: ./run-health-checks.sh || exit 1

      - name: Tear down Docker Compose
        if: always()
        run: docker compose -f docker-compose.yml down

  # Build Docker image
  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build consumer image
        run: |
          cd consumer
          docker build -t consumer:latest .

      - name: Run container tests
        run: |
          cd consumer
          docker run --rm consumer:latest python -c "import main; print('Consumer module imported successfully')"

      - name: Save Docker image
        run: |
          docker save consumer:latest -o consumer-image.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: consumer-image
          path: consumer-image.tar

  # CD job
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref_type == 'tag'
    environment: staging
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: consumer-image
          path: .

      - name: Load Docker image
        run: docker load -i consumer-image.tar

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to server
        run: |
          REMOTE_DIR="/opt/logging-pipeline"
          SSH_OPTS="-p ${{ secrets.SERVER_PORT }} -o StrictHostKeyChecking=no -o ConnectTimeout=30"
          
          # Create remote directory
          ssh $SSH_OPTS ${{ secrets.SERVER_USER }}@${{ secrets.STAGING_SERVER }} "mkdir -p $REMOTE_DIR"
          
          # Copy files
          scp $SSH_OPTS docker-compose.yml docker-compose.prod.yml ${{ secrets.SERVER_USER }}@${{ secrets.STAGING_SERVER }}:$REMOTE_DIR/
          scp $SSH_OPTS -r config/ ${{ secrets.SERVER_USER }}@${{ secrets.STAGING_SERVER }}:$REMOTE_DIR/
          scp $SSH_OPTS run-health-checks.sh ${{ secrets.SERVER_USER }}@${{ secrets.STAGING_SERVER }}:$REMOTE_DIR/
          
          # Transfer and load Docker image
          docker save consumer:latest | ssh $SSH_OPTS ${{ secrets.SERVER_USER }}@${{ secrets.STAGING_SERVER }} "docker load"
          
          # Deploy on remote server
          ssh $SSH_OPTS ${{ secrets.SERVER_USER }}@${{ secrets.STAGING_SERVER }} << 'EOF'
            cd /opt/logging-pipeline
            
            # استفاده از docker compose (بدون نیاز به نصب جداگانه)
            docker compose -f docker-compose.yml down
            docker compose -f docker-compose.yml up -d --build
            
            sleep 60
            chmod +x run-health-checks.sh
            ./run-health-checks.sh
          EOF

      - name: Verify deployment
        run: |
          SSH_OPTS="-p ${{ secrets.SERVER_PORT }} -o StrictHostKeyChecking=no -o ConnectTimeout=30"
          ssh $SSH_OPTS ${{ secrets.SERVER_USER }}@${{ secrets.STAGING_SERVER }} << 'EOF'
            cd /opt/logging-pipeline
            docker compose ps
            docker compose logs --tail=20
          EOF