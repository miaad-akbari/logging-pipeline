# .github/workflows/ci-cd.yml
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  push:
    tags: ['v*']

jobs:

  # Continuous Integration (CI)
  
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          cd consumer
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 black

      - name: Run unit tests
        run: |
          cd consumer
          python -m pytest tests/ -v --cov=. --cov-report=xml

      - name: Lint Python code
        run: |
          cd consumer
          black --check .
          flake8 .

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./consumer/coverage.xml

  # Build Docker image

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build consumer image
        run: |
          cd consumer
          docker build -t consumer:latest .

      - name: Run container tests
        run: |
          cd consumer
          docker run --rm consumer:latest python -m pytest tests/ -v

      - name: Save Docker image
        run: |
          cd consumer
          docker save consumer:latest -o consumer-image.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: consumer-image
          path: consumer/consumer-image.tar

  # Continuous Deployment (CD)

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref_type == 'tag' 
    environment: staging
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: consumer-image
          path: .

      - name: Load Docker image
        run: docker load -i consumer-image.tar

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to server
        run: |

          REMOTE_DIR=/opt/logging-pipeline

          # Copy docker-compose and configs
          scp -r docker-compose.yml docker-compose.prod.yml config/ ${{ secrets.SERVER_USER }}@${{ secrets.STAGING_SERVER }}:${REMOTE_DIR}

          # Load Docker image on remote
          docker save consumer:latest | ssh ${{ secrets.SERVER_USER }}@${{ secrets.STAGING_SERVER }} -p ${{ secrets.SERVER_PORT }} "docker load"

          # Start services
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.STAGING_SERVER }} -p ${{ secrets.SERVER_PORT }} << 'EOF'
            cd /opt/logging-pipeline
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml down
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
            sleep 30
            docker-compose logs
          EOF

    - name: Run smoke tests
      run: |
        ssh -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.STAGING_SERVER }} << 'EOF'
          cd /opt/logging-pipeline

          # Test MySQL
          docker exec mysql mysql -uroot -prootpassword -e "SHOW DATABASES;"

          # Test Kafka
          docker exec kafka kafka-topics --list --bootstrap-server localhost:9092

          # Test PostgreSQL
          docker exec postgres psql -U user -d mysqllogs -c "SELECT version();"

          # Test consumer (Python check)
          docker exec consumer python - <<'PY'
import psycopg2
conn = psycopg2.connect(
    dbname='mysqllogs',
    user='user',
    password='password',
    host='postgres'
)
print("PostgreSQL connection successful")
conn.close()
PY
        EOF
