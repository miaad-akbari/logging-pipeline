# .github/workflows/ci-cd.yml
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main]

jobs:

  # CI job
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: docker compose -f docker-compose.yml up -d --build
      
      - name: Make health check script executable
        run: chmod +x run-health-checks.sh
      
      - name: Run health checks
        run: ./run-health-checks.sh


  # Build Docker image
  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: 

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build consumer image
        run: |
          cd consumer
          docker build -t consumer:latest .

      - name: Save Docker image
        run: |
          docker save consumer:latest -o consumer-image.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: consumer-image
          path: consumer-image.tar

  # CD job
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref_type == 'tag'
    environment: staging
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: consumer-image
          path: .

      - name: Load Docker image
        run: docker load -i consumer-image.tar

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to server
        run: |
          REMOTE_DIR=/opt/logging-pipeline
          scp -r docker-compose.yml docker-compose.prod.yml config/ ${{ secrets.SERVER_USER }}@${{ secrets.STAGING_SERVER }}:${REMOTE_DIR}
          docker save consumer:latest | ssh ${{ secrets.SERVER_USER }}@${{ secrets.STAGING_SERVER }} -p ${{ secrets.SERVER_PORT }} "docker load"
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.STAGING_SERVER }} -p ${{ secrets.SERVER_PORT }} << 'EOF'
            cd /opt/logging-pipeline
            docker compose -f docker-compose.yml down
            docker compose -f docker-compose.yml up -d --build
            chmod +x run-health-checks.sh
            ./run-health-checks.sh
          EOF
